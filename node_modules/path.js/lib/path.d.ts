/**
 * The Path Class for handling file path operations.
 *
 */
export class Path {
    /**
     * Constructs a new Path instance for handling file path operations.
     *
     * @param {string|object} aOptions - Initialization options for the Path instance.
     *   If a string is provided, it sets the 'sep' property. If an object is provided,
     *   it can contain properties 'sep', 'delimiter', and 'splitPathReStr' to initialize
     *   respective instance properties.
     */
    constructor(aOptions: string | object);
    /**
     * The path separator character.
     * @type {string}
     */
    sep: string;
    /**
     * The path delimiter character.
     * @type {string}
     */
    delimiter: string;
    /**
     * A string representation of the regular expression used to split paths.
     * Must include the placeholder "&SEP&" which will be replaced with the actual
     * path separator character.
     * @type {string}
     */
    splitPathReStr: string;
    /**
     * Updates the internal split path regular expression using the current
     * `splitPathReStr` property, replacing the placeholder "&SEP&" with the actual
     * path separator character.
     *
     * @memberof Path
     * @instance
     * @returns {RegExp} - The updated split path regular expression.
     */
    updateSplitPathRe(): RegExp;
    splitPathRe: RegExp;
    /**
     * Splits a given filename into parts using the current split path regular expression.
     * Returns an array containing the matched parts, excluding the first element (the entire match).
     *
     * @memberof Path
     * @instance
     * @param {string} filename - The filename to split.
     * @returns {string[]} - An array of path parts extracted from the filename.
     */
    splitPath(filename: string): string[];
    /**
     * Converts a given path string into an array by splitting it using the current
     * path separator. Removes leading and trailing separators from the resulting array.
     *
     * @memberof Path
     * @instance
     * @param {string} aPath - The path string to convert.
     * @returns {string[]} - An array of path components without leading or trailing separators.
     */
    toArray(aPath: string): string[];
    /**
     * Normalizes an array of path components, resolving "." and ".." elements, and
     * optionally allowing paths above the root directory.
     *
     * @memberof Path
     * @instance
     * @param {string[]} parts - An array of path components to normalize.
     * @param {boolean} [allowAboveRoot=false] - Whether to allow paths above the root directory.
     * @returns {string[]} - The normalized array of path components.
     */
    normalizeArray(parts: string[], allowAboveRoot?: boolean): string[];
    /**
     * Removes leading and trailing null or empty elements from an array.
     *
     * @memberof Path
     * @instance
     * @param {any[]} arr - The array to trim.
     * @returns {any[]} - The trimmed array.
     */
    trimArray(arr: any[]): any[];
    /**
     * Checks if a given path is an absolute path.
     *
     * @memberof Path
     * @instance
     * @param {string} path - The path to check.
     * @returns {boolean} - True if the path is absolute, false otherwise.
     */
    isAbsolute(path: string): boolean;
    /**
     * Normalizes a given path, resolving "." and ".." elements, removing unnecessary
     * slashes, and ensuring that the path starts with the correct separator.
     *
     * @memberof Path
     * @instance
     * @param {string} path - The path to normalize.
     * @returns {string} - The normalized path.
     */
    normalize(path: string): string;
    /**
     * Retrieves the current working directory.
     *
     * @memberof Path
     * @instance
     * @returns {string} - The current working directory, represented as a dot ('.').
     */
    cwd(): string;
    /**
     * Resolves a sequence of paths or path segments into an absolute path. It takes
     * an arbitrary number of arguments and returns the resolved path as an array.
     * If no arguments are provided, the current working directory is used as the
     * starting point.
     *
     * @memberof Path
     * @instance
     * @param {...(string|string[])} paths - Paths or path segments to resolve.
     * @returns {string[]} - An array representing the resolved absolute path.
     */
    resolveArray(...args: (string | string[])[]): string[];
    /**
     * Resolves a sequence of paths or path segments into an absolute path. It takes
     * an arbitrary number of arguments and returns the resolved path as a string.
     * If no arguments are provided, the current working directory is used as the
     * starting point.
     *
     * @memberof Path
     * @instance
     * @param {...(string|string[])} paths - Paths or path segments to resolve.
     * @returns {string} - The resolved absolute path.
     */
    resolve(...args: (string | string[])[]): string;
    /**
     * Joins an arbitrary number of path segments together into a single path.
     * It accepts both strings and arrays of strings as input.
     *
     * @memberof Path
     * @instance
     * @private
     * @param {...(string|string[])} paths - Path segments to join.
     * @returns {string[]} - An array of joined path segments.
     */
    private _join;
    /**
     * Joins an arbitrary number of path segments together into a single normalized path.
     * It accepts both strings and arrays of strings as input.
     *
     * @memberof Path
     * @instance
     * @param {...(string|string[])} paths - Path segments to join.
     * @returns {string} - The normalized joined path.
     */
    join(...args: (string | string[])[]): string;
    /**
     * Compares two directories for equality.
     *
     * @memberof Path
     * @instance
     * @private
     * @param {string} aDir1 - The first directory to compare.
     * @param {string} aDir2 - The second directory to compare.
     * @returns {boolean} - True if the directories are the same, false otherwise.
     */
    private _isSame;
    /**
     * Computes the relative path from one path to another.
     *
     * @memberof Path
     * @instance
     * @param {string} from - The starting path.
     * @param {string} to - The destination path.
     * @returns {string} - The relative path from `from` to `to`.
     */
    relative(from: string, to: string): string;
    /**
     * Retrieves the directory name of a given path.
     *
     * @memberof Path
     * @instance
     * @param {string} path - The path to extract the directory name from.
     * @returns {string} - The directory name.
     */
    dirname(path: string): string;
    /**
     * Retrieves the last portion of a path, typically a file name.
     *
     * @memberof Path
     * @instance
     * @param {string} path - The path to extract the base name from.
     * @param {string} [ext] - An optional extension to remove from the base name.
     * @returns {string} - The base name of the path.
     */
    basename(path: string, ext?: string): string;
    /**
     * Replaces the extension of a given path with a new extension.
     *
     * @memberof Path
     * @instance
     * @param {string} path - The path whose extension to replace.
     * @param {string} ext - The new extension.
     * @returns {string} - The path with the replaced extension.
     */
    replaceExt(path: string, ext: string): string;
    /**
     * Retrieves the extension of a given path.
     *
     * @memberof Path
     * @instance
     * @param {string} path - The path to extract the extension from.
     * @returns {string} - The extension of the path.
     */
    extname(path: string): string;
    /**
     * Formats a path object into a path string.
     *
     * @memberof Path
     * @instance
     * @param {object} pathObject - An object containing path components to format.
     * @returns {string} - The formatted path string.
     */
    format(pathObject: object): string;
    /**
     * Parses a path string into an object containing its component parts.
     *
     * @memberof Path
     * @instance
     * @param {string} pathString - The path string to parse.
     * @returns {object} - An object containing the parsed path components.
     */
    parse(pathString: string): object;
    /**
     * Converts a given path to a long UNC path, if applicable.
     *
     * @memberof Path
     * @instance
     * @private
     * @param {string} path - The path to convert.
     * @returns {string} - The converted long UNC path, or the original path if not applicable.
     */
    private _makeLong;
    /**
     * Returns whether the current operating system is Windows.
     *
     * @memberof Path
     * @instance
     * @returns {boolean} - True if the OS is Windows, false otherwise.
     */
    isWindows: boolean;
    /**
     * A regular expression pattern used to match path separators in various operations.
     *
     * @memberof Path
     * @instance
     * @private
     * @type {RegExp}
     */
    private _sepRe;
    /**
     * The default path separator character.
     *
     * @memberof Path
     * @instance
     * @type {string}
     */
    _sep: string;
    /**
     * The default path delimiter character.
     *
     * @memberof Path
     * @instance
     * @type {string}
     */
    _delimiter: string;
    /**
     * A string representation of the regular expression used to split paths.
     * Contains the placeholder "&SEP&" which will be replaced with the actual
     * path separator character.
     *
     * @memberof Path
     * @instance
     * @type {string}
     */
    _splitPathReStr: string;
}
export namespace Path {
    let isWindows: boolean;
}
export default Path;
